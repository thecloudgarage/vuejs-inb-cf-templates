---
  AWSTemplateFormatVersion: "2010-09-09"
  Description: "Software Defined Virtual Private Cloud"
  Parameters:
      VpcName:
        Type: "String"
      VpcCIDR:
        Type: "String"
      WebSubnetCIDRZoneA:
        Type: "String"
      WebSubnetCIDRZoneB:
        Type: "String"
      AppSubnetCIDRZoneA:
        Type: "String"
      AppSubnetCIDRZoneB:
        Type: "String"
      DBSubnetCIDRZoneA:
        Type: "String"
      DBSubnetCIDRZoneB:
        Type: "String"
  Resources:
    Vpc:
      Type: "AWS::EC2::VPC"
      Properties:
        EnableDnsSupport: "true"
        EnableDnsHostnames: "true"
        CidrBlock:
          Ref: "VpcCIDR"
        Tags:
          -
            Key: "Name"
            Value:
              Ref: "VpcName"
    WebSubnetZoneA:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "WebSubnetCIDRZoneA"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}a"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", WebSubnetZoneA ] ]
    WebSubnetZoneB:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "WebSubnetCIDRZoneB"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}b"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", WebSubnetZoneB ] ]
    AppSubnetZoneA:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "AppSubnetCIDRZoneA"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}a"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", AppSubnetZoneA ] ]
    AppSubnetZoneB:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "AppSubnetCIDRZoneB"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}b"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", AppSubnetZoneB ] ]
    DBSubnetZoneA:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "DBSubnetCIDRZoneA"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}a"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", DBSubnetZoneA ] ]
    DBSubnetZoneB:
      Type: "AWS::EC2::Subnet"
      Properties:
        VpcId:
          Ref: "Vpc"
        CidrBlock:
          Ref: "DBSubnetCIDRZoneB"
        MapPublicIpOnLaunch: "true"
        AvailabilityZone: !Sub "${AWS::Region}b"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", DBSubnetZoneB ] ]
    Igw:
      Type: "AWS::EC2::InternetGateway"
      Properties:
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", igw ] ]
    IgwAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        VpcId:
          Ref: "Vpc"
        InternetGatewayId:
          Ref: "Igw"
    PublicRt:
      Type: "AWS::EC2::RouteTable"
      Properties:
        VpcId:
          Ref: "Vpc"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", public, rt ] ]
    PublicDefaultRoute:
      Type: "AWS::EC2::Route"
      DependsOn: "IgwAttachment"
      Properties:
        RouteTableId:
          Ref: "PublicRt"
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId:
          Ref: "Igw"
    PublicRt2WebSubnetZoneA:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "WebSubnetZoneA"
        RouteTableId:
          Ref: "PublicRt"
    PublicRt2WebSubnetZoneB:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "WebSubnetZoneB"
        RouteTableId:
          Ref: "PublicRt"
    PublicRt2AppSubnetZoneA:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "AppSubnetZoneA"
        RouteTableId:
          Ref: "PublicRt"
    PublicRt2AppSubnetZoneB:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "AppSubnetZoneB"
        RouteTableId:
          Ref: "PublicRt"
    PublicRt2DBSubnetZoneA:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "DBSubnetZoneA"
        RouteTableId:
          Ref: "PublicRt"
    PublicRt2DBSubnetZoneB:
      Type: "AWS::EC2::SubnetRouteTableAssociation"
      Properties:
        SubnetId:
          Ref: "DBSubnetZoneB"
        RouteTableId:
          Ref: "PublicRt"
    PublicNacl:
      Type: "AWS::EC2::NetworkAcl"
      Properties:
        VpcId:
          Ref: "Vpc"
        Tags:
          -
            Key: "Name"
            Value: !Join [ "-", [ !Ref "VpcName", public, nacl ] ]
    PublicNaclInbound:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNacl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
    PublicNaclOutbound:
      Type: "AWS::EC2::NetworkAclEntry"
      Properties:
        NetworkAclId:
          Ref: "PublicNacl"
        RuleNumber: "100"
        Protocol: "-1"
        RuleAction: "allow"
        Egress: "true"
        CidrBlock: "0.0.0.0/0"
        PortRange:
          From: "0"
          To: "65535"
    PublicNacl2WebSubnetZoneA:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "WebSubnetZoneA"
        NetworkAclId:
          Ref: "PublicNacl"
    PublicNacl2WebSubnetZoneB:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "WebSubnetZoneB"
        NetworkAclId:
          Ref: "PublicNacl"
    PublicNacl2AppSubnetZoneA:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "AppSubnetZoneA"
        NetworkAclId:
          Ref: "PublicNacl"
    PublicNacl2AppSubnetZoneB:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "AppSubnetZoneB"
        NetworkAclId:
          Ref: "PublicNacl"
    PublicNaclDBSubnetZoneA:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "DBSubnetZoneA"
        NetworkAclId:
          Ref: "PublicNacl"
    PublicNaclDBSubnetZoneB:
      Type: "AWS::EC2::SubnetNetworkAclAssociation"
      Properties:
        SubnetId:
          Ref: "DBSubnetZoneB"
        NetworkAclId:
          Ref: "PublicNacl"
    SgAllTraffic:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allows all inbound and outbound traffic
        GroupName: !Join [ "-", [ !Ref "VpcName", sg, alltraffic ] ]
        VpcId:
          Ref: "Vpc"
        SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  Outputs:
    VpcId:
      Description: "VPC ID"
      Value:
        Ref: "Vpc"
      Export:
        Name:
          !Sub "${VpcName}-vpcid"
    WebSubnetZoneA:
      Description: "SubnetId of the Web subnet ZoneA"
      Value:
        Ref: "WebSubnetZoneA"
      Export:
        Name:
          !Sub "${VpcName}-WebSubnet-ZoneA"
    WebSubnetZoneB:
      Description: "SubnetId of the Web subnet ZoneB"
      Value:
        Ref: "WebSubnetZoneB"
      Export:
        Name:
          !Sub "${VpcName}-WebSubnet-ZoneB"
    AppSubnetZoneA:
      Description: "SubnetId of the App subnet ZoneA"
      Value:
        Ref: "AppSubnetZoneA"
      Export:
        Name:
          !Sub "${VpcName}-AppSubnet-ZoneA"
    AppSubnetZoneB:
      Description: "SubnetId of the App subnet ZoneB"
      Value:
        Ref: "AppSubnetZoneB"
      Export:
        Name:
          !Sub "${VpcName}-AppSubnet-ZoneB"
    DbSubnetZoneA:
      Description: "SubnetId of the DB subnet ZoneA"
      Value:
        Ref: "DBSubnetZoneA"
      Export:
        Name:
          !Sub "${VpcName}-DBSubnet-ZoneA"
    DbSubnetZoneB:
      Description: "SubnetId of the DB subnet ZoneB"
      Value:
        Ref: "DBSubnetZoneB"
      Export:
        Name:
          !Sub "${VpcName}-DBSubnet-ZoneB"
    PublicRt:
      Description: "Route Table Id of the Public Routing Table"
      Value:
        Ref: "PublicRt"
      Export:
        Name:
          !Sub "${VpcName}-public-rt"
    SgAllTraffic:
      Description: "Seccurity Group Id of the All Traffic group"
      Value: { "Fn::GetAtt" : ["SgAllTraffic", "GroupId"] }
      Export:
        Name:
          !Sub "${VpcName}-sg-alltraffic"
